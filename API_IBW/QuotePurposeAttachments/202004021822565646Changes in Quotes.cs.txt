/////////////////////////////////////////////////////////Update Methods///////////////////////////////////////////////////////////


        public bool generateBudgetForQuote(long? QuoteId, long? SiteId, long? SOWId, long? userID, string details)
        {
            List<JobCodes> jobCodesList = _adminMethods.GetJobCodes();

            //long? budgetID = 0;
            //_quotesDB.upsertBudgetOfSOW(budgetData.budgetId, budgetData.sowId, budgetData.totalQuotedCostSOW, budgetData.totalBudgetCostSOW, budgetData.totalBudgetHoursSOW, budgetData.totalExpensesCost,
            //       budgetData.isSubmitted, budgetData.createdBy, budgetData.modifiedBy, ref budgetID);

            List<TaskBudget> taskList = _adminMethods.GetTasks().Select(x => new TaskBudget
            {
                taskBudgetId = null,
                budgetId = null,
                taskId = x.TaskId,
                taskName = x.TaskName,
                totalBudgetCostSOW = 0,
                totalBudgetHoursSOW = 0,
                totalQuotedCostSOW = 0,
                Data = x.jobCodeDetails.Select(y => new JobCodeBudget
                {
                    jobCodeBudgetId = null,
                    taskBudgetId = null,
                    jobCodeId = y.JobCodeId,
                    plannedHours = 0,
                    rate = jobCodesList.Where(l => l.JobCodeId == y.JobCodeId).Select(j => j.ChargeoutRate).FirstOrDefault(),
                    total = 0,
                    notes = y.Notes,
                    isUserAdded = false,
                    isDeleted = false
                }).ToList()
            }).ToList();

            List<expenses> expensesList = getAllExpenseCodesWithUnits().Where(x => x.bt_isDefault == true && x.bt_status == true).Select(ex => new expenses
            {
                expenseBudgetId = null,
                expenseBudgetCustomId = null,
                expenseCodeId = ex.int_expense_code_master_id,
                expenseCodeName = ex.vc_expense_code,
                expenseUnit = ex.expenseUnit,
                expenseRate = ex.dec_rate,
                quantity = 0,
                total = 0,
                isDeleted = false,
                createdBy = userID
            }).ToList();

            Budget budgetData = new Budget()
            {
                quoteId = QuoteId,
                siteId = SiteId,
                sowId = SOWId,
                budgetId = null,
                isDefault = true,
                totalBudgetCostSOW = 0,
                totalBudgetHoursSOW = 0,
                totalQuotedCostSOW = 0,
                totalExpensesCost = 0,
                createdBy = userID,
                taskandJobCodesData = taskList,
                manageNotes = details
            };
            if (upsertBudgetForSowQuote(budgetData) > 0)
            {
                return upsertExpenses(expensesList, SOWId);
            }
            else
            {
                return false;
            }
        }


/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



 public List<Sow> getAllSOWOfQuote(long? quoteId, long? siteId)
        {
            try
            {
                var data = _quotesDB.getAllSowOfQuoteandSite(quoteId, siteId).OrderByDescending(x => x.int_sow_id).ThenBy(x => x.vc_sow_name).ToList();
                List<Sow> AllSOWs = new List<Sow>();
                foreach (var item in data)
                {
                    Sow eachSowdata = new Sow();
                    eachSowdata.sowId = item.int_sow_id;
                    eachSowdata.sowName = item.vc_sow_name;
                    eachSowdata.label = (item.vc_sow_number != null ? item.vc_sow_number : "") + " " + item.vc_sow_name;
                    eachSowdata.isSite = false;
                    eachSowdata.sowTypeId = item.int_sow_type_id;
                    eachSowdata.siteId = item.int_site_id;
                    eachSowdata.siteName = item.vc_site_name;
                    eachSowdata.quoteId = item.int_quote_id;
                    eachSowdata.googleDriveFolderId = item.vc_google_drive_folder_id;
                    eachSowdata.isApproved = item.bt_isApproved;
                    eachSowdata.sowNumber = item.vc_sow_number;
                    eachSowdata.isSavedInBudget = _quotesDB.getBudgetDetailsOfSOW(item.int_sow_id).ToList().Count > 0 ? true : false;
                    eachSowdata.isDefault = item.bt_isDefault;
                    eachSowdata.sowStatus = item.int_sow_status_id;
                    eachSowdata.sowInvoiceType = item.int_sow_invoice_type_id;
                    if (eachSowdata.isApproved == true)
                    {
                        eachSowdata.expandedIcon = "fa fa-briefcase cs-blue";
                        eachSowdata.collapsedIcon = "fa fa-briefcase cs-blue";
                    }
                    else
                    {
                        eachSowdata.expandedIcon = "fa fa-briefcase red";
                        eachSowdata.collapsedIcon = "fa fa-briefcase red";
                    }
                    AllSOWs.Add(eachSowdata);
                }
                return AllSOWs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


      //Author : Sreebharath 
        //Date : 24-10-2019
        //Tpo upsert budget for Sow
        public long? upsertBudgetForSowQuote(Budget model)
        {
            try
            {
                long? result = 0;
                long? jobCodeResult = 0;
                _quotesDB.upsertBudgetOfSOW(model.budgetId, model.sowId, model.totalQuotedCostSOW, model.totalBudgetCostSOW, model.totalBudgetHoursSOW, model.totalExpensesCost,
                    model.isSubmitted, model.createdBy, model.modifiedBy, ref result);
                if (result > 0)
                {
                    if (model.taskandJobCodesData.Count > 0)
                    {
                        foreach (var taskItem in model.taskandJobCodesData)
                        {
                            long? taskResult = 0;
                            if (taskItem.taskBudgetId == null)
                            {

                                if (setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId, model.sowId) != null)
                                {
                                    string sowGoogeDriveFolderId = getAllSOWOfQuote(model.quoteId, model.siteId).Where(x => x.siteId == model.siteId && x.sowId == model.sowId).Select(y => y.googleDriveFolderId).FirstOrDefault();
                                    string taskGoogleDriveId = GoogleDriveFilesRepository.CreateFolder(taskItem.taskName, sowGoogeDriveFolderId);
                                    _quotesDB.upsertTasksinSOWBudget(taskItem.taskBudgetId, result, taskItem.taskId, taskItem.taskName, taskItem.totalQuotedCostSOW,
                                    taskItem.totalBudgetCostSOW, taskItem.totalBudgetHoursSOW, taskGoogleDriveId, ref taskResult);
                                }

                            }
                            else
                            {
                                if (setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId, model.sowId, taskItem.taskBudgetId) != null)
                                {
                                    _quotesDB.upsertTasksinSOWBudget(taskItem.taskBudgetId, result, taskItem.taskId, taskItem.taskName, taskItem.totalQuotedCostSOW,
                                    taskItem.totalBudgetCostSOW, taskItem.totalBudgetHoursSOW, null, ref taskResult);
                                }
                            }

                            if (taskResult > 0)
                            {
                                if (taskItem.Data.Count > 0)
                                {
                                    foreach (var jobCodeItem in taskItem.Data)
                                    {
                                        _quotesDB.upsertJobCodesInTaskBudget(jobCodeItem.jobCodeBudgetId, taskResult, jobCodeItem.jobCodeId, jobCodeItem.plannedHours, jobCodeItem.total,
                                            jobCodeItem.rate, jobCodeItem.isUserAdded, jobCodeItem.notes, jobCodeItem.isDeleted, ref jobCodeResult);
                                    }
                                }
                                else
                                {
                                    jobCodeResult = taskResult;
                                }
                            }
                        }
                    }
                }
                if (jobCodeResult > 0)
                {
                    if (model.isDefault && model.budgetId == null)
                    {
                        long? defaultActionResult = 0;
                        _quotesDB.automateActionForDefaultSOW(model.quoteId, model.sowId, result, model.manageNotes,model.createdBy, ref defaultActionResult);
                        if (defaultActionResult > 0)
                        {
                            var taskData = _quotesDB.getTaskDetailsOfManageAction(defaultActionResult).FirstOrDefault();
                            if (setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId, model.sowId, taskData.int_ibw_budget_task_id, defaultActionResult) != null)
                            {
                                //string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + taskData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                //string manageactionFolderId =  GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.task_google_drive_folder_id);
                                //_quotesDB.tbl_ibw_manage_actions.Single(action => action.int_ibw_manage_action_id == defaultActionResult).vc_google_drive_file_id = manageactionFolderId;
                                return jobCodeResult;

                            }
                            //_quotesDB.SubmitChanges();
                        }
                        else
                        {
                            return 0;
                        }
                    }
                    return jobCodeResult;
                }
                else
                {
                    return 0;
                }
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


  public List<Sow> getSowsOfSitesInManage(long? quoteId, long? siteId)
        {
            try
            {
                var data = _quotesDB.getSavedBudgetInManage(quoteId).Where(x => x.int_site_id == siteId).OrderByDescending(x => x.int_sow_id).ThenBy(x => x.vc_sow_name).ToList();
                List<Sow> AllSOWs = new List<Sow>();
                foreach (var item in data)
                {
                    Sow eachSowdata = new Sow();
                    eachSowdata.sowId = item.int_sow_id;
                    eachSowdata.sowName = item.vc_sow_name;
                    eachSowdata.label = (item.vc_sow_number != null ? item.vc_sow_number : "") + " " + item.vc_sow_name;
                    eachSowdata.isSite = false;
                    eachSowdata.siteId = item.int_site_id;
                    eachSowdata.siteName = item.vc_site_name;
                    eachSowdata.quoteId = item.int_quote_id;
                    eachSowdata.isApproved = item.bt_isApproved;
                    if (eachSowdata.isApproved == true)
                    {
                        eachSowdata.expandedIcon = "fa fa-briefcase cs-blue";
                        eachSowdata.collapsedIcon = "fa fa-briefcase cs-blue";
                    }
                    else
                    {
                        eachSowdata.expandedIcon = "fa fa-briefcase red";
                        eachSowdata.collapsedIcon = "fa fa-briefcase red";
                    }
                    AllSOWs.Add(eachSowdata);
                }
                return AllSOWs;
            }
            catch (Exception ex)
            {
                throw ex;
            }
        }


//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


   //Author : Sreebharath 
        //Date : 16-10-2019
        //Upsert SOW for Quotes
        public long? upsertSOWForQuotes(Sow model)
        {
            try
            {
                string sowNumber = GetSOWSerialNumber(model.quoteId);

                if (model.sowId == null)
                {
                    if (setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId) != null)
                    {
                        string siteGoogeDriveFolderId = getAllSitesOfQuote(model.quoteId).Where(x => x.siteId == model.siteId).Select(y => y.googleDriveFolderId).FirstOrDefault();
                        string latestSowNumber = "";
                        if (sowNumber.Contains("#"))
                        {
                            string[] arrayLatestSerialNum = sowNumber.Split('#');
                            latestSowNumber = arrayLatestSerialNum[1];
                        }
                        else
                        {
                            latestSowNumber = sowNumber;
                        }

                        model.googleDriveFolderId = GoogleDriveFilesRepository.CreateFolder(latestSowNumber + " " + model.sowName, siteGoogeDriveFolderId);
                    }
                }
                else
                {
                    var sowData = _quotesDB.getAllSowOfQuoteandSite(model.quoteId, model.siteId).Where(x => x.int_sow_id == model.sowId).FirstOrDefault();
                    if (sowData.vc_sow_name != model.sowName)
                    {
                        if (setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId, model.sowId) != null)
                        {
                            var sowInfo = _quotesDB.getAllSowOfQuoteandSite(model.quoteId, model.siteId).Where(x => x.int_sow_id == model.sowId).FirstOrDefault();

                            string latestSowNumber = "";
                            if (model.sowNumber.Contains("#"))
                            {
                                string[] arrayLatestSerialNum = model.sowNumber.Split('#');

                                latestSowNumber = arrayLatestSerialNum[1];
                            }
                            else
                            {
                                latestSowNumber = model.sowNumber;
                            }
                            GoogleDriveFilesRepository.UpdateFolderName(latestSowNumber + " " + model.sowName , sowInfo.vc_google_drive_folder_id);

                        }
                    }
                    if (sowData.int_sow_status_id != model.sowStatus)
                    {
                        long? statusActivityLogId = UpdateQuoteStatusActivity(null, model.quoteId, model.sowStatus, null, null, model.statusOptionId, model.remarks, model.modifiedBy, "sow", model.sowId);

                    }
                }
                long? result = null;
                _quotesDB.upsertSOWQuotes(model.sowId, model.sowName, model.sowTypeId, model.siteId, model.quoteId, sowNumber, model.createdBy, model.modifiedBy, model.googleDriveFolderId, model.isApproved, model.isDefault, model.sowInvoiceType, model.sowStatus, ref result);


                return result;
            }
            catch (Exception ex)
            {
                throw ex;
            }

        }


///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



  public long? insertActionInManageGlobally(ActionsCreate model, bool isFileExists)
        {
            bool? isUploaded = setUpGoogleDriveFileForEntireQuoteStructure(model.quoteId, model.siteId, model.sowId, model.taskBudgetId);
            string googleDriveUploadedFileId = "";
            var userDetails = _adminDB.sp_getAllIBWUsers().Where(x => x.int_user_id == model.createdBy).FirstOrDefault();
            if (isUploaded != null)
            {
                var taskBudgetData = _quotesDB.tbl_tasks_in_sow_budgets.Where(x => x.int_task_in_sow_id == model.taskBudgetId).FirstOrDefault();
                string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + model.actionName + "-" + DateTime.Now.ToString("HH:mm");
                model.googleDriveFileId = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskBudgetData.vc_google_drive_folder_id);
                if (isFileExists == true)
                {
                    googleDriveUploadedFileId = GoogleDriveFilesRepository.FileUploadInFolderDirect(model.googleDriveFileId, model.googleDriveFile, (userDetails.vc_user_name + " " + userDetails.vc_alias_name), null);

                }
                long? actionResult = null;
                if(model.manageSowId != null && model.manageSowId != 0)
                {
                    _quotesDB.insertActionInManageGlobally(model.manageSowId, model.taskManageId, model.actionId, model.jobCodeId, model.actionName, model.jobCodeName, model.jobCodeRate,
                                  model.plannedHours, model.plannedCost, model.dueDate, model.dueDateOption, 0, 0, model.notes, googleDriveUploadedFileId, model.googleDriveFileId, model.isRemedial, model.teamMemberId, ref actionResult);
                    return actionResult;
                }
                else
                {
                    _quotesDB.saveManageTaskAndAction(model.quoteId, model.sowId, model.budgetSowId, model.taskBudgetId, model.actionId, model.actionName, model.jobCodeId, model.jobCodeName, model.jobCodeRate,
                             model.plannedHours, model.plannedCost, model.dueDate, model.dueDateOption, model.notes, googleDriveUploadedFileId, model.googleDriveFileId, model.isRemedial, model.teamMemberId, model.createdBy,ref actionResult);
                    return actionResult;
                }
              
            }
            else
            {
                return 0;
            }
        }
      

///////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



     public void deleteGoogleDriveFilesfromList(List<string> filesList)
        {
            foreach (var item in filesList)
            {
                GoogleDriveFilesRepository.DeleteFile(item);
            }
        }



//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////



  public bool? setUpGoogleDriveFileForEntireQuoteStructure(long? QuoteID, long? SiteID = null, long? SOWID = null, long? TaskBudgetID = null, long? ManageActionID = null)
        {
            try
            {

                var quoteData = _quotesDB.tbl_ibw_quotes.Where(x => x.int_quote_id == QuoteID).FirstOrDefault();
                var siteData = _quotesDB.tbl_ibw_sites.Where(x => x.int_site_id == SiteID).FirstOrDefault();
                var sowData = _quotesDB.tbl_ibw_sows.Where(x => x.int_sow_id == SOWID).FirstOrDefault();
                var taskData = _quotesDB.tbl_tasks_in_sow_budgets.Where(x => x.int_task_in_sow_id == TaskBudgetID).FirstOrDefault();
                var actionData = _quotesDB.tbl_ibw_manage_actions.Where(x => x.int_ibw_manage_action_id == ManageActionID).FirstOrDefault();

                bool? returnValue = true;
                if (GoogleDriveFilesRepository.CheckFileExists(quoteData.vc_GDrive_file_id))
                {
                    returnValue = true;
                    if (SiteID != null)
                    {
                        if (GoogleDriveFilesRepository.CheckFileExists(siteData.vc_google_drive_folder_id))
                        {
                            returnValue = true;
                            if (SOWID != null)
                            {
                                if (GoogleDriveFilesRepository.CheckFileExists(sowData.vc_google_drive_folder_id))
                                {
                                    returnValue = true;
                                    if (TaskBudgetID != null)
                                    {
                                        if (GoogleDriveFilesRepository.CheckFileExists(taskData.vc_google_drive_folder_id))
                                        {
                                            returnValue = true;
                                            if (ManageActionID != null)
                                            {
                                                if (actionData.vc_google_drive_file_id != null && GoogleDriveFilesRepository.CheckFileExists(actionData.vc_google_drive_file_id))
                                                {
                                                    returnValue = true;
                                                }
                                                else
                                                {
                                                    returnValue = false;
                                                    string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + actionData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                                    var tblActions = _quotesDB.tbl_ibw_manage_actions.Single(x => x.int_ibw_manage_action_id == ManageActionID);
                                                    tblActions.vc_google_drive_file_id = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.vc_google_drive_folder_id);
                                                }
                                            }
                                        }
                                        else
                                        {
                                            returnValue = false;
                                            var tblTasks = _quotesDB.tbl_tasks_in_sow_budgets.Single(x => x.int_task_in_sow_id == TaskBudgetID);
                                            tblTasks.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(taskData.vc_task_name, sowData.vc_google_drive_folder_id);
                                            if (ManageActionID != null)
                                            {
                                                string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + actionData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                                var tblActions = _quotesDB.tbl_ibw_manage_actions.Single(x => x.int_ibw_manage_action_id == ManageActionID);
                                                tblActions.vc_google_drive_file_id = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.vc_google_drive_folder_id);
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    returnValue = false;
                                    var tblSOWs = _quotesDB.tbl_ibw_sows.Single(x => x.int_sow_id == SOWID);

                                    string latestSowNumber = "";
                                    if (sowData.vc_sow_number.Contains("#"))
                                    {
                                        string[] arrayLatestSerialNum = sowData.vc_sow_number.Split('#');
                                        latestSowNumber = arrayLatestSerialNum[1];
                                    }
                                    else
                                    {
                                        latestSowNumber = sowData.vc_sow_number;
                                    }

                                    tblSOWs.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(latestSowNumber + " " +sowData.vc_sow_name, siteData.vc_google_drive_folder_id);
                                    if (TaskBudgetID != null)
                                    {
                                        var tblTasks = _quotesDB.tbl_tasks_in_sow_budgets.Single(x => x.int_task_in_sow_id == TaskBudgetID);
                                        tblTasks.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(taskData.vc_task_name, sowData.vc_google_drive_folder_id);
                                        if (ManageActionID != null)
                                        {
                                            string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + actionData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                            var tblActions = _quotesDB.tbl_ibw_manage_actions.Single(x => x.int_ibw_manage_action_id == ManageActionID);
                                            tblActions.vc_google_drive_file_id = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.vc_google_drive_folder_id);
                                        }
                                    }
                                }
                            }
                        }
                        else
                        {
                            returnValue = false;
                            var tblSite = _quotesDB.tbl_ibw_sites.Single(x => x.int_site_id == SiteID);
                            tblSite.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(siteData.vc_site_name, quoteData.vc_GDrive_file_id);
                            if (SOWID != null)
                            {
                                var tblSOWs = _quotesDB.tbl_ibw_sows.Single(x => x.int_sow_id == SOWID);
                                string latestSowNumber = "";
                                if (sowData.vc_sow_number.Contains("#"))
                                {
                                    string[] arrayLatestSerialNum = sowData.vc_sow_number.Split('#');
                                    latestSowNumber = arrayLatestSerialNum[1];
                                }
                                else
                                {
                                    latestSowNumber = sowData.vc_sow_number;
                                }

                                tblSOWs.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(latestSowNumber + " " + sowData.vc_sow_name, siteData.vc_google_drive_folder_id);
                                if (TaskBudgetID != null)
                                {
                                    var tblTasks = _quotesDB.tbl_tasks_in_sow_budgets.Single(x => x.int_task_in_sow_id == TaskBudgetID);
                                    tblTasks.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(taskData.vc_task_name, sowData.vc_google_drive_folder_id);
                                    if (ManageActionID != null)
                                    {
                                        string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + actionData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                        var tblActions = _quotesDB.tbl_ibw_manage_actions.Single(x => x.int_ibw_manage_action_id == ManageActionID);
                                        tblActions.vc_google_drive_file_id = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.vc_google_drive_folder_id);
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    returnValue = false;
                    var tblQuote = _quotesDB.tbl_ibw_quotes.Single(x => x.int_quote_id == QuoteID);
                    tblQuote.vc_GDrive_file_id = SaveFileInGDrive(QuoteID, quoteData.bt_project == true ? "Project" : "Quote");
                    if (SiteID != null)
                    {
                        var tblSite = _quotesDB.tbl_ibw_sites.Single(x => x.int_site_id == SiteID);
                        tblSite.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(siteData.vc_site_name, quoteData.vc_GDrive_file_id);
                        if (SOWID != null)
                        {
                            var tblSOWs = _quotesDB.tbl_ibw_sows.Single(x => x.int_sow_id == SOWID);
                            string latestSowNumber = "";
                            if (sowData.vc_sow_number.Contains("#"))
                            {
                                string[] arrayLatestSerialNum = sowData.vc_sow_number.Split('#');
                                latestSowNumber = arrayLatestSerialNum[1];
                            }
                            else
                            {
                                latestSowNumber = sowData.vc_sow_number;
                            }

                            tblSOWs.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(latestSowNumber + " " + sowData.vc_sow_name, siteData.vc_google_drive_folder_id);
                            if (TaskBudgetID != null)
                            {
                                var tblTasks = _quotesDB.tbl_tasks_in_sow_budgets.Single(x => x.int_task_in_sow_id == TaskBudgetID);
                                tblTasks.vc_google_drive_folder_id = GoogleDriveFilesRepository.CreateFolder(taskData.vc_task_name, sowData.vc_google_drive_folder_id);
                                if (ManageActionID != null)
                                {
                                    string actionFileName = DateTime.Now.ToString("yyyyMMdd") + "-" + actionData.vc_custom_action_name + "-" + DateTime.Now.ToString("HH:mm");
                                    var tblActions = _quotesDB.tbl_ibw_manage_actions.Single(x => x.int_ibw_manage_action_id == ManageActionID);
                                    tblActions.vc_google_drive_file_id = GoogleDriveFilesRepository.CreateFolder(actionFileName, taskData.vc_google_drive_folder_id);
                                }
                            }
                        }
                    }
                }
                _quotesDB.SubmitChanges();
                return returnValue;
            }
            catch (Exception ex)
            {
                return null;
                throw ex;
            }

        }


////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////




//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////
///////////////////////////////////////////////////Add New Methods in Manage Region///////////////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


public List<ActionsCreate> getAllSiteNSowsOfBudget(long? QuoteId)
        {
            List<ActionsCreate> sitesandSowList = _quotesDB.getAllSavedSitesNSowInBudget(QuoteId).Select(x => new ActionsCreate
            {
                quoteId = x.int_quote_id,
                siteId = x.int_site_id,
                siteName = x.vc_site_name,
                sowId = x.int_sow_id,
                sowName = x.vc_sow_name,
                sowNumber = x.vc_sow_number,
                budgetSowId = x.int_budget_sow_id,
                manageSowId = x.int_manage_sow_id
            }).ToList();
            return sitesandSowList;
        }



/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


        public List<TaskBudget> getSavedTasksInBudget(long? budgetSowId)
        {
            List<TaskBudget> tasksList = new List<TaskBudget>();
            var data = _quotesDB.getSavedTasksInBudget(budgetSowId).ToList();
            foreach (var item in data)
            {
                TaskBudget taskItem = new TaskBudget();
                taskItem.taskManageId = item.int_ibw_manage_task_id;
                taskItem.taskBudgetId = item.int_task_in_sow_id;
                taskItem.taskId = item.int_task_id;
                taskItem.taskName = item.vc_task_name;
                tasksList.Add(taskItem);
            }
            return tasksList;
        }


